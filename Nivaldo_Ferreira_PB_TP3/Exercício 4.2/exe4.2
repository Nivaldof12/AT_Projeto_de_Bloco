import ipaddress

class TrieNode:
    def __init__(self):
        self.children = {}
        self.prefix = None

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, prefix):
        network = ipaddress.ip_network(prefix, strict=False)
        node = self.root
        for part in str(network.network_address).split('.'):
            if part not in node.children:
                node.children[part] = TrieNode()
            node = node.children[part]
        node.prefix = prefix

    def longest_prefix_match(self, ip):
        ip_obj = ipaddress.ip_address(ip)
        node = self.root
        longest_match = None
        for part in str(ip_obj).split('.'):
            if part in node.children:
                node = node.children[part]
                if node.prefix:
                    longest_match = node.prefix
            else:
                break
        return longest_match

trie = Trie()
prefixos = ["192.168.0.0/16", "192.168.1.0/24", "10.0.0.0/8"]
for prefix in prefixos:
    trie.insert(prefix)

ip = "192.168.1.100"
resultado = trie.longest_prefix_match(ip)
print(f"O longest prefix match para o IP {ip} Ã©: {resultado}")
