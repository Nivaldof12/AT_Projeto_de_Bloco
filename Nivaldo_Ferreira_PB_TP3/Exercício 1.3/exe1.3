class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

class BST:
    def __init__(self):
        self.root = None

    def insert(self, key):
        self.root = self._insert_rec(self.root, key)

    def _insert_rec(self, node, key):
        if node is None:
            return Node(key)
        if key < node.key:
            node.left = self._insert_rec(node.left, key)
        else:
            node.right = self._insert_rec(node.right, key)
        return node

    def search(self, key):
        return self._search_rec(self.root, key)

    def _search_rec(self, node, key):
        if node is None or node.key == key:
            return node
        if key < node.key:
            return self._search_rec(node.left, key)
        return self._search_rec(node.right, key)

bst = BST()
for value in [50, 30, 70, 20, 40, 60, 80]:
    bst.insert(value)

valor_procurado = 40
resultado = bst.search(valor_procurado)

if resultado:
    print(f"Valor {valor_procurado} encontrado na BST!")
else:
    print(f"Valor {valor_procurado} nÃ£o encontrado na BST.")
