import threading

class Node:
    def __init__(self, key):
        self.value = key
        self.left = None
        self.right = None

def find_max_parallel(root):
    if root is None:
        return float('-inf')

    def search_subtree(subtree):
        if subtree is None:
            return float('-inf')
        left_max = search_subtree(subtree.left)
        right_max = search_subtree(subtree.right)
        return max(subtree.value, left_max, right_max)

    left_thread = threading.Thread(target=search_subtree, args=(root.left,))
    right_thread = threading.Thread(target=search_subtree, args=(root.right,))

    left_thread.start()
    right_thread.start()

    left_thread.join()
    right_thread.join()

    return max(root.value, search_subtree(root.left), search_subtree(root.right))

root = Node(15)
root.left = Node(10)
root.right = Node(20)
root.left.left = Node(8)
root.left.right = Node(12)
root.right.left = Node(17)
root.right.right = Node(25)

max_value = find_max_parallel(root)
print(f"O maior valor na árvore é: {max_value}")