import math
import multiprocessing
import time

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def sequential_prime_count(n):
    count = 0
    for i in range(1, n):
        if is_prime(i):
            count += 1
    return count

def count_primes_in_range(start, end):
    count = 0
    for i in range(start, end):
        if is_prime(i):
            count += 1
    return count

def parallel_prime_count(n):
    cores = multiprocessing.cpu_count()
    pool = multiprocessing.Pool(cores)
    step = n // cores
    ranges = [(i * step, (i + 1) * step) for i in range(cores)]
    
    ranges[-1] = (ranges[-1][0], n)
    
    result = pool.starmap(count_primes_in_range, ranges)
    pool.close()
    pool.join()
    
    return sum(result)

if __name__ == "__main__":
    n = 100000
    
    start_time = time.time()
    sequential_result = sequential_prime_count(n)
    sequential_time = time.time() - start_time

    start_time = time.time()
    parallel_result = parallel_prime_count(n)
    parallel_time = time.time() - start_time

    print(f'Número de primos (sequencial): {sequential_result}')
    print(f'Tempo gasto (sequencial): {sequential_time:.4f} segundos')

    print(f'Número de primos (paralela): {parallel_result}')
    print(f'Tempo gasto (paralela): {parallel_time:.4f} segundos')