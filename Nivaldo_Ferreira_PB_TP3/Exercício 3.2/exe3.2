import threading

class Node:
    def __init__(self, key):
        self.value = key
        self.children = []

def dfs_parallel(root, target, path, result):
    if root is None:
        return False

    path.append(root.value)

    if root.value == target:
        result.append(list(path))
        return True

    def search_subtree(child):
        dfs_parallel(child, target, path, result)

    threads = []
    for child in root.children:
        t = threading.Thread(target=search_subtree, args=(child,))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

    path.pop()

    return False

root = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)
node5 = Node(5)
root.children = [node2, node3]
node2.children = [node4]
node3.children = [node5]

target_value = 5
path = []
result = []
dfs_parallel(root, target_value, path, result)

print(f"Caminho até o nó {target_value}: {result}")
