from multiprocessing import Pool

def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result

def merge_sort(lst):
    if len(lst) <= 1:
        return lst
    mid = len(lst) // 2
    left = merge_sort(lst[:mid])
    right = merge_sort(lst[mid:])
    return merge(left, right)

def parallel_merge_sort(lst):
    if len(lst) <= 1:
        return lst
    mid = len(lst) // 2

    with Pool(processes=2) as pool:
        left, right = pool.map(merge_sort, [lst[:mid], lst[mid:]])

    return merge(left, right)

large_list = [38, 27, 43, 3, 9, 82, 10]
sorted_list = parallel_merge_sort(large_list)
print(f"Lista ordenada: {sorted_list}")
