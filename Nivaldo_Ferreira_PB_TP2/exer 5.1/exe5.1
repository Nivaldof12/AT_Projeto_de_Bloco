# Soma Paralela com multiprocessing
from multiprocessing import Pool

# Função para dividir e somar
def sum_parallel(lst):
    with Pool() as pool:  # Cria processos
        chunk_size = len(lst) // 4  # Divide em 4 partes
        chunks = [lst[i:i + chunk_size] for i in range(0, len(lst), chunk_size)]
        results = pool.map(sum, chunks)  # Soma cada pedaço
    return sum(results)

# Soma Sequencial
def sum_sequential(lst):
    return sum(lst)

# Lista grande para teste
large_list = list(range(1, 10001))

# Testando as duas abordagens
print(f"Soma paralela: {sum_parallel(large_list)}")
print(f"Soma sequencial: {sum_sequential(large_list)}")
